# The format of login / logout reports if the watch parameter is set.
# Default is `%n has %a %l from %m'.
# Recognizes the following escape sequences:
# %n = name of the user that logged in/out.
# %a = observed action, i.e. "logged on" or "logged off".
# %l = line (tty) the user is logged in on.
# %M = full hostname of the remote host.
# %m = hostname up to the first `.'.
# %t or %@ = time, in 12-hour, am/pm format.
# %w = date in `day-dd' format.
# %W = date in `mm/dd/yy' format.
# %D = date in `yy-mm-dd' format.
# WATCHFMT='%n %a %l from %m at %t.'
# WATCHFMT='*knock* *knock* Follow the white rabbit => %n %a %l from %m at %t.'
# WATCHFTM=print '\e[1;35m%B[%b\e[1;32m%B%n%b\e[1;35m%B]%b \e[1;34m%U%a%u \e[1;35mfrom terminal \e[1;31m%M \e[1;35mat \e[1;33m%U%T%u\e[0m''
#WATCHFMT="[%B%t%b] %B%n%b has %a %B%l%b from %B%M%b"
WATCHFMT="%B->%b %n has just %a %(l:tty%l:%U-Ghost-%u)%(m: from %m:)"

# format of process time reports with 'time'
# %% A `%'.
# %U CPU seconds spent in user mode.
# %S CPU seconds spent in kernel mode.
# %E Elapsed time in seconds.
# %P The CPU percentage, computed as (%U+%S)/%E.
# %J The name of this job.
# Default is:
# %E real %U user %S system %P %J
TIMEFMT="Real: %E User: %U System: %S Percent: %P Cmd: %J"

# Zsh settings for history
#export HISTIGNORE="&:ls:[bf]g:exit:reset:clear:cd:cd ..:cd.."
HISTSIZE=25000
HISTFILE=~/.zsh_history
SAVEHIST=100000
HISTORY_IGNORE="(ls|[bf]g|exit|reset|clear|cd|cd ..|cd..)"
setopt INC_APPEND_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_REDUCE_BLANKS
setopt HIST_VERIFY

DIRSTACKSIZE=50

LISTMAX=0

autoload -U compinit
autoload -U promptinit
autoload keeper && keeper
compinit -i

promptinit

# automatically remove duplicates from these arrays
typeset -gU path cdpath manpath fpath

setopt nomatch

autoload -U history-search-end

# BEeeep!
setopt beep

setopt no_clobber

# This tries to find wordcode files and automatically re-compile them if
# at least one of the original files is newer than the wordcode file.
  autoload zrecompile

# This is a multiple move based on zsh pattern matching (like "mmv").
# Read ``less ${^fpath}/zmv(N)'' for more details
  autoload zmv
# Edit small files with the command line editor.
  autoload -U zed

# Edit the command line using your usual editor.
  autoload -U edit-command-line

setopt auto_menu
unsetopt menu_complete

  # This module should be automatically loaded if u use menu selection but
# to be sure we do it here
  zmodload -i zsh/complist

# When listing options (by `setopt', `unsetopt', `set -o' or `set +o'),
# those turned on by default appear in the list prefixed with `no'.
# Hence (unless KSH_OPTION_PRINT is set), `setopt' shows all options
# whose settings are changed from the default.
#
# Report the status of background jobs immediately, rather than
# waiting until just before printing a prompt.
setopt notify

# Watch for logins
#watch=(notme)
watch=(all)

# Allow comments even in interactive shells i. e.
# $ uname # This command prints system informations
# zsh: bad pattern: #
# $ setopt interactivecomments
# $ uname # This command prints system informations
# OpenBSD
setopt interactivecomments

# Try to make the completion list smaller (occupying less lines) by
# printing the matches in columns with different widths.
setopt list_packed

# if the braces aren't in either of the above forms, expands single
# letters and ranges of letters, i. e.:
#  $ print 1{abw-z}2
#  $ 1a2 1b2 1w2 1x2 1y2 1z2
setopt braceccl

# If the argument to a cd command (or an implied cd with the
# AUTO_CD option set) is not a directory, and does not begin with a
# slash, try to expand the expression as if it were preceded by a
# '~' (see section Filename Expansion).
setopt cdablevars

# Report the status of background and suspended jobs before exiting a shell
# with job control; a second attempt to exit the shell will succeed.
setopt checkjobs

# Make cd push the old directory onto the directory stack.
setopt autopushd

# change to directory without "cd"
setopt autocd

# Treat the '#', '~' and '^' characters as part of patterns
# for filename generation, etc. (An initial unquoted '~'
# always produces named directory expansion.)
# | $ grep word *~(*.gz|*.bz|*.bz2|*.zip|*.Z)
# searches for word not in compressed files
setopt extendedglob

# Do query the user before executing 'rm *' or 'rm path/*'
# $ rm -rf *
# zsh: sure you want to delete all the files in /home/dope/foo [yn]?
setopt normstarsilent

# If querying the user before executing `rm *' or `rm path/*',
# first wait ten seconds and ignore anything typed in that time.
# This avoids the problem of reflexively answering `yes' to the query
# when one didn't really mean it. The wait and query can always be
# avoided by expanding the `*' in ZLE (with tab).
setopt no_rm_star_wait

# When writing out the history file, older commands that duplicate newer ones
# are omitted.
setopt HISTSAVENODUPS

# When searching for history entries in the line editor, do not display
# duplicates of a line previously found, even if the duplicates are not
# contiguous.
setopt HISTFINDNODUPS

# If the internal history needs to be trimmed to add the current command line,
# setting this option will cause the oldest history event that has a duplicate
# to be lost before losing a unique event from the list.
# You should be sure to set the value of HISTSIZE to a larger number
# than SAVEHIST in order to give you some room for the duplicated
# events, otherwise this option will behave just like HIST_IGNORE_ALL_DUPS
# once the history fills up with unique events.
setopt hist_expire_dups_first

# If a new command line being added to the history list duplicates an
# older one, the older command is removed from the list (even if it is
# not the previous event).
setopt hist_ignore_all_dups

# Do not enter command lines into the history list
# if they are duplicates of the previous event.
setopt hist_ignore_dups

# Remove command lines from the history list when the first character on
# the line is a space, or when one of the expanded aliases contains a
# leading space.
# Note that the command lingers in the internal history until the next
# command is entered before it vanishes, allowing you to briefly reuse
# or edit the line.  If you want to make it vanish right away without
# entering another command, type a space and press return.
setopt hist_ignore_space

# HIST_REDUCE_BLANKS
# Remove superfluous blanks from each command line
# being added to the history list.
setopt hist_reduce_blanks

# Whenever the user enters a line with history expansion,
# don't execute the line directly; instead, perform
# history expansion and reload the line into the editing buffer.
setopt hist_verify

# Remove the history (fc -l) command from the history list
# when invoked.
# Note that the command lingers in the internal history until the next
# command is entered before it vanishes, allowing you to briefly reuse
# or edit the line.
#setopt hist_no_store

# If this is set, zsh sessions will append their history list to
# the history file, rather than overwrite it. Thus, multiple parallel
# zsh sessions will all have their history lists added to the
# history file, in the order they are killed
setopt appendhistory

# If unset, the cursor is set to the end of the word if completion is
# started. Otherwise it stays there and completion is done from both ends.
setopt completeinword

#  When listing files that are possible completions, show the
# type of each file with a trailing identifying mark.
setopt list_types

#  Do not require a leading '.' in a filename to be matched explicitly.
setopt globdots

# Try to correct the spelling of all arguments in a line.
# setopt correctall

# Don't push multiple copies of the same directory onto the directory
# stack
setopt pushdignoredups

# reverse the numbering of the dir stack
setopt PUSHD_MINUS

# This option both imports new commands from the history file, and also
# causes your typed commands to be appended to the history file (the
# latter is like specifying INC_APPEND_HISTORY).
# The history lines are also output with timestamps ala
# EXTENDED_HISTORY (which makes it easier to find the spot where
# we left off reading the file after it gets re-written).
setopt sharehistory

# Save each command's beginning timestamp (in seconds since the epoch)
# and the duration (in seconds) to the history file.  The format of
# this prefixed data is:
# ':<beginning time>:<elapsed seconds>;<command>'.
# i. e.:
#  : 1054961691:0;/usr/games/fortune -f
setopt EXTENDEDHISTORY

# Allow the short forms of for, select, if, and function constructs, i.
# e.: ``for i (*.o) rm $i'' instead of ``for i in *.o; do rm $i; done''
setopt shortloops



export AUTOSUGGESTION_ACCEPT_RIGHT_ARROW=1

# export AUTOSUGGESTION_HIGHLIGHT_COLOR=fg=7

# zstyle ':completion:*:*:jumpto:*:processes' command 'ps --forest -e -o pid,user,tty,cmd'

zstyle ':completion:*' menu select

zstyle ':completion:::::' completer _complete _approximate

zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm"


setopt inc_append_history # save history entries as soon as they are entered

